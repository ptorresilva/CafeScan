import streamlit as st
import tensorflow as tf
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image as PILImage
import io

# -----------------------------
# Configuraci√≥n inicial
# -----------------------------
st.set_page_config(page_title="Detecci√≥n de Enfermedades del Cafeto", layout="centered")
st.title("üåø Clasificador de Hojas de Cafeto")

# -----------------------------
# Par√°metros del modelo
# -----------------------------
TAMANO_IMAGEN = (224, 224)
CLASES = ['saludable', 'roya', 'antracnosis', 'mancha_hierro', 'phoma']

# -----------------------------
# Cargar modelo
# -----------------------------
@st.cache_resource
def cargar_modelo():
    return load_model("modelo_cafeto.h5")

modelo = cargar_modelo()

# -----------------------------
# Cargar y preprocesar imagen
# -----------------------------
def preprocesar_imagen(img):
    img = img.resize(TAMANO_IMAGEN)
    img_array = image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)
    img_array = img_array / 255.0
    return img_array

# -----------------------------
# Interfaz de usuario
# -----------------------------
imagen_subida = st.file_uploader("üì∑ Sube una imagen de hoja de cafeto", type=["jpg", "jpeg", "png"])

if imagen_subida is not None:
    img = PILImage.open(imagen_subida).convert("RGB")
    st.image(img, caption="Imagen cargada", use_column_width=True)

    if st.button("üîç Predecir enfermedad"):
        imagen_preprocesada = preprocesar_imagen(img)
        predicciones = modelo.predict(imagen_preprocesada)
        indice = np.argmax(predicciones[0])
        clase_predicha = CLASES[indice]
        confianza = np.max(predicciones[0]) * 100

        st.markdown(f"### ‚úÖ Predicci√≥n: **{clase_predicha.upper()}**")
        st.markdown(f"Confianza: {confianza:.2f}%")

        st.progress(min(int(confianza), 100))
else:
    st.info("Por favor sube una imagen de una hoja de cafeto para comenzar.")
